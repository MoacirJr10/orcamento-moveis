plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.ben-manes.versions' version '0.51.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {

		exclude group: 'androidx.compose', module: '*'
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'

		resolutionStrategy {

			force 'org.apache.commons:commons-lang3:3.14.0'
			force 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
			failOnVersionConflict()
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'com.lowagie:itext:2.1.7'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.awaitility:awaitility:4.2.1'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true
	}
	systemProperty 'spring.profiles.active', 'test'
	maxHeapSize = "1G"
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ['-Xlint:all', '-Werror']
	options.encoding = 'UTF-8'
	options.incremental = true
}

tasks.withType(Test).configureEach {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	forkEvery = 100
}

bootJar {
	archiveFileName = "${project.name}.jar"
	layered {
		enabled = true
		includeLayerTools = true
	}
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Created-By': "Gradle ${gradle.gradleVersion}",
				'Built-By': System.getProperty('user.name'),
				'Build-Jdk': System.getProperty('java.version'),
				'Main-Class': 'com.example.orcamento_moveis.OrcamentoMoveisApplication'
		)
	}
}

tasks.register('dependencyUpdates', com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask) {
	checkForGradleUpdate = true
	outputFormatter = 'json'
	outputDir = 'build/dependencyUpdates'
	reportfileName = 'report'
}

tasks.register('analyzeDependencies') {
	doLast {
		def dependencies = configurations.compileClasspath.resolvedConfiguration.lenientConfiguration.allModuleVersions
		dependencies.each { dep ->
			println "${dep.module.id.group}:${dep.module.id.name}:${dep.module.id.version}"
		}
	}
}

if (version.toString().endsWith('-SNAPSHOT')) {
	tasks.withType(Upload).configureEach {
		enabled = false
	}
}